{{if (eq .PROMETHEUS_METRICS_ENABLED "true")}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{.NAME}}-{{.ENV}}-exporter-deployment
  namespace: {{.NAME}}-{{.ENV}}
  labels:
    app: {{.NAME}}-{{.ENV}}
    component: {{.EXPORTER_COMPONENT}}
spec:
  replicas: {{.EXPORTER_REPLICAS}}
  selector:
    matchLabels:
      app: {{.NAME}}-{{.ENV}}
      component: {{.EXPORTER_COMPONENT}}
  template:
    metadata:
      labels:
        app: {{.NAME}}-{{.ENV}}
        component: {{.EXPORTER_COMPONENT}}
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/path: "{{.PROMETHEUS_METRICS_PATH}}"
        prometheus.io/port: "{{.CONTAINER_METRICS_PORT}}"
    spec:
      containers:
      - name: {{.NAME}}
        image: {{.EXPORTER_DOCKER_IMAGE}}
        ports:
        - containerPort: {{.CONTAINER_METRICS_PORT}}
        env: {{range $k, $v := .ENVIRONMENT_VARIABLES}} 
          - name: {{$k}} 
            value: {{$v | wrapInQuotes}}
        {{end}}
          - name: PG_EXPORTER_WEB_LISTEN_ADDRESS
            value: ":{{.CONTAINER_METRICS_PORT}}"
          - name: PG_EXPORTER_WEB_TELEMETRY_PATH
            value: "{{.PROMETHEUS_METRICS_PATH}}"
          - name: DATA_SOURCE_USER
            value: "{{.POSTGRES_USER}}"
          - name: DATA_SOURCE_PASS
            value: "{{.POSTGRES_PASSWORD}}"
          - name: DATA_SOURCE_URI
            value: "{{.NAME}}-{{.ENV}}-service?sslmode=disable"
        {{if .CONTAINER_ARGS}}
        args: {{range $idx, $argsMap := .CONTAINER_ARGS | yamlArrayToObj}}
          - {{$argsMap.arg}}{{end}}
        {{end}}
      {{if (eq .USE_IMAGE_PULL_SECRET "true")}}
      imagePullSecrets:
        - name: {{.NAME}}-{{.ENV}}-docker-imgpull-secret
      {{end}}
{{end}}